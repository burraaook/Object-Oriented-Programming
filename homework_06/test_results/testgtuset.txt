
___Testing GTUSet class___


Testing No parameter constructor for integer type.
Object is constructed fine. add() function also works fine, and it is automatically ordered.
set1 : 2 3 5 8 11 

Duplication is tested(3 added twice) and every element is unique.

Testing Copy constructor.
Object is constructed fine.
set2(copy of set1) : 2 3 5 8 11 
cbegin() end cend() member functions works fine(used while printing).

Testing move constructor with std::string.

temp1: apple banana tomato 

after moving temp1's resources to set4.
set4: apple banana tomato 
temp1's resources are stolen well. Move constructor works fine

set3 created
set3: bread onion 

Testing assignment operator(set3 = set4).
set3: apple banana tomato 
Assignment done well.

Testing move assignment operator for set5(double).
set5: 1.1 2.1 3.3 5.2 

Temporary object is created.
tempSet : 1.3 2.2 5.2 
Temporary object's resources are stolen well.(set5 = std::move(tempSet)
set5: 1.3 2.2 5.2 

Move assignment is tested and works fine.

Testing erase() functions and range based for loop.
Before
set6(char): ! 5 7 U a c k 

After calling set6.erase(set6.search('c'))
set6: ! 5 7 U a k 

After calling set6.erase(set.begin(), set.begin()+2)
set6: 7 U a k 

After calling set6.erase('U')
set6: 7 a k 

After calling set6.deleteElement('5')
set6: 7 a k 
After calling set6.clear( )
size = 0
set is empty.(testing set6.empty())
begin(),search(), clear(), size(), empty(), deleteElement(), range based for loop, erase() and its overloaded versions works fine.

Adding elements to set6 again.
set6: ! 5 7 U a c k 
set7: 5 6 8 U b c m 
union(set6,set7): ! 5 6 7 8 U a b c k m 
intersection(set6,set7): 5 U c 
union and intersect functions are tested.

Testing set8 for std::sort.
Before
set8: 1 2 3 4 5 6 7 8 13 22 
After calling std::sort(set8.begin(),set8.end())
set8: 1 2 3 4 5 6 7 8 13 22 
After calling std::sort(set8.begin(), set8.end(), std::greater<int>())
set8: 22 13 8 7 6 5 4 3 2 1 

std::sort works fine, end() works fine and iterators are tested.

Testing set8 for std::find function.
After auto itr = std::find(set8.begin(), set8.end(),1); statement
*itr = 1
std::find is tested.

Testing std::for_each

before(will be printed with std::for_each)
set8: 22 13 8 7 6 5 4 3 2 1 
after(incrementing with std::for_each)
set8: 23 14 9 8 7 6 5 4 3 2 
std::for_each is tested and works fine.

Testing exceptions for GTUSet class.
sample set: 3 5 6 
Trying to erase invalid iterator.
exception: Invalid iterator is entered!

_____All GTUSet classes functions, STL library functions, and exceptions are tested.___
