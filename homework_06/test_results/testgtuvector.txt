
___Testing GTUVector class___


Testing No parameter constructor for integer type.
Object is constructed fine. add() function also works fine.
vec1 : 5 3 8 

Testing Copy constructor.
Object is constructed fine.
vec2(copy of vec1) : 5 3 8 
cbegin() end cend() member functions works fine(used while printing).

Testing fill constructor with different type(double).
Object is constructed fine.
vec3(double): 0 0 0 0 0 0 0 

Testing other fill constructor which takes 2 parameter with another class(std::string).
Object is constructed fine.
vec4: apple apple apple apple apple apple 

Testing move constructor with anonymous object for string type.
Anonymous objects resources are stolen well.
vec5: tomato tomato tomato tomato tomato 

Testing assignment operator(vec4 = vec5).
Assignment done well.
vec4: tomato tomato tomato tomato tomato 

Testing move assingment operator for vec3(double).

Temporary object is created.
tempVec : 22 22 22 
Temporary object's resources are stolen well(vec3 = std::move(tempVec).
vec3: 22 22 22 

Move assignment is tested.

Testing [] operator for vec1 as lvalue.
vec1 : 1 3 5 
operator [] works fine as lvalue(vec1's values are changed). Printed with ranged based for loop.

Testing [] operator for vec3 as rvalue.
vec3: 22 22 22 
operator [] works fine as rvalue.

Testing erase() functions and range based for loop.
Before erasing first element
vec6(char): a c k 7 ! 

After calling vec6.erase(vec6.begin())
vec6: c k 7 ! 

After calling vec6.erase(vec.begin(), vec.begin()+2)
vec6: 7 ! 
After calling vec6.clear( )
size = 0
vec6 is empty(vec6.empty() is being called)

begin(), clear(), size(), empty(), range based for loop, erase() and its overloaded version works fine.

Testing vec for std::sort.
Before
vec: 3 5 4 2 13 1 7 6 22 3 3 8 
After calling std::sort(vec.begin(),vec.end())
vec: 1 2 3 3 3 4 5 6 7 8 13 22 
After calling std::sort(vec.begin(), vec.end(), std::greater<int>())
vec: 22 13 8 7 6 5 4 3 3 3 2 1 

std::sort works fine, end() works fine and iterators are tested.

Testing vec for std::find function.
After auto itr = std::find(vec.begin(), vec.end(),1); statement
*itr = 1
std::find is tested.

Testing std::for_each

before(will be printed with std::for_each)
vec: 22 13 8 7 6 5 4 3 3 3 2 1 
after(incrementing with std::for_each)
vec: 23 14 9 8 7 6 5 4 4 4 3 2 
std::for_each is tested and works fine.

Testing GTUVector exceptions.
vec7: 30 30 30 30 30 
trying to access vec7[6].
exception: Array subscript exceeds its allowed range!
vec9: 30 30 30 30 30 
trying to erase invalid iterator.
exception: Invalid iterator is entered!
All exceptions are tested.

_____All GTUVector classes functions, STL library functions, and exceptions are tested.___
