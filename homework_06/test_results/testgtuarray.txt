
___Testing GTUArray class___


Testing No parameter constructor for integer type.
Object is constructed fine. operator [] works fine as lvalue.
arr1 : 3 5 6 8 

Testing Copy constructor.
Object is constructed fine.
arr2(copy of arr1) : 3 5 6 8 
cbegin() end cend() member functions works fine(used while printing).

Testing move constructor.
tempArr(string): tomato apple car bread happy 
After calling the move constructor for arr3.
arr3: tomato apple car bread happy 

tempArr's resources are stolen.Move constructor tested.

Testing assignment operator(arr3 = arr4).

arr4: coin house black nine movie 
arr3: coin house black nine movie 
Assignment done well.

Testing move assingment operator for arr5(double).
tempArr2: 3.1 2.6 7.1 2.2 8.3 
After the move assingment arr5 = std::move(tempArr2)
arr5: 3.1 2.6 7.1 2.2 8.3 
tempArr2's resources are stolen well. Move assigment is tested.

Testing [] operator for arr3 as rvalue.
arr3: coin house black nine movie 
operator [] works fine as rvalue.

Testing erase() functions and range based for loop(assigns default value of given type).
Before erasing first element
arr6(int): 5 7 2 1 8 

After calling arr6.erase(arr6.begin())
arr6: 0 7 2 1 8 

After calling arr6.erase(arr.begin(), arr.begin()+2)
arr6: 0 0 2 1 8 
After calling arr6.clear( )
arr1: 0 0 0 0 0 
begin(), clear(), range based for loop, erase() and its overloaded version works fine.

Testing at() functions as lvalue and rvalue.
Before assignment
arr1: 3 5 6 8 
After using as lvalue.
arr1: 10 12 16 55 
at() function works fine as lvalue and rvalue.

Testing arr7 for std::sort.
Before
arr7: 3 5 4 2 12 1 7 6 22 3 3 8 
After calling std::sort(arr7.begin(),arr7.end())
arr7: 1 2 3 3 3 4 5 6 7 8 12 22 
After calling std::sort(arr7.begin(), arr7.end(), std::greater<int>())
arr7: 22 12 8 7 6 5 4 3 3 3 2 1 

std::sort works fine, end() works fine and iterators are tested.

Testing arr7 for std::find function.
After auto itr = std::find(arr7.begin(), arr7.end(),1); statement
*itr = 1
std::find is tested.

Testing std::for_each

before(will be printed with std::for_each)
arr7: 22 12 8 7 6 5 4 3 3 3 2 1 
after(incrementing with std::for_each)
arr7: 23 13 9 8 7 6 5 4 4 4 3 2 
std::for_each is tested and works fine.

Testing GTUArray exceptions.

samplearr1: 0 2 4 6 8 
trying to access 6th element of 5 sized array with at(6).
exception: Array subscript exceeds its allowed range!
samplearr2: 0 2 4 6 8 
trying to erase invalid iterator.
exception: Invalid iterator is entered!
All exceptions are tested.

_____All GTUArray classes functions, STL library functions, and exceptions are tested.___
